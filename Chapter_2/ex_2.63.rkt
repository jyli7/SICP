#lang planet neil/sicp

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

;the lists generated by this procedure (from figure 2.16):

;(1 3 5 7 9 11)

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

;a. Do the two procedures produce the same result for every tree? If not, how do the results differ? What
;lists do the two procedures produce for the trees in figure 2.16?

(define tree1
  (make-tree 7 (make-tree 3 (make-tree 1 nil nil) (make-tree 5 nil nil)) (make-tree 9 nil (make-tree 11 nil nil))))

(define tree2
  (make-tree 3 (make-tree 1 nil nil) (make-tree 7 (make-tree 5 nil nil) (make-tree 9 nil (make-tree 11 nil nil)))))

(define tree3
  (make-tree 5 (make-tree 3 (make-tree 1 nil nil) nil) (make-tree 9 (make-tree 7 nil nil) (make-tree 11 nil nil))))

(display (tree->list-1 tree1))
(newline)
(display (tree->list-2 tree1))
(newline)
(display (tree->list-1 tree2))
(newline)
(display (tree->list-2 tree2))
(newline)
(display (tree->list-1 tree3))
(newline)
(display (tree->list-2 tree3))

;results are the same?

;b. Do the two procedures have the same order of growth in the number of steps required to convert a
;balanced tree with n elements to a list? If not, which one grows more slowly?

