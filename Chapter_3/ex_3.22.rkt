#lang planet neil/sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (prt-q)
      (newline)
      (display front-ptr))
    (define (emp-q?)
      (null? front-ptr))
    (define (fro-q)
      (if (emp-q?)
          (error "FRONT called with empty queue")))
    (define (ins-q! item)
      (let ((new-pair (cons item '())))
        (cond ((emp-q?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (del-q!)
      (cond ((emp-q?)
             (error "DELETE! called with empty queue"))
            (else
             (set! front-ptr (cdr front-ptr)))))
    (define (dispatch m)
      (cond ((eq? m 'insert-queue!) ins-q!)
            ((eq? m 'delete-queue!) (del-q!))
            ((eq? m 'front-queue!) (fro-q))
            ((eq? m 'empty-queue?) (emp-q?))
            ((eq? m 'print-queue) (prt-q))
            (else (error "Undefined operation -- MAKE_QUEUE" m))))
    dispatch))

(define (insert-queue! queue item)
  ((queue 'insert-queue!) item)
  queue)
(define (delete-queue! queue)
  (queue 'delete-queue!)
  queue)
(define (empty-queue? queue)
  (queue 'empty-queue?))
(define (front-queue queue)
  (queue 'front-queue))
(define (print-queue queue)
  (queue 'print-queue))
      
        
          
